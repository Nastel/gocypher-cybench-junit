<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2020-2022, K2N.IO.
  ~
  ~ This library is free software; you can redistribute it and/or
  ~ modify it under the terms of the GNU Lesser General Public
  ~ License as published by the Free Software Foundation; either
  ~ version 2.1 of the License, or (at your option) any later version.
  ~
  ~ This library is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this library; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  ~
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.gocypher.cybench</groupId>
    <artifactId>cybench-t2b-annotations</artifactId>
    <version>1.0</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <project.resources.encoding>UTF-8</project.resources.encoding>
        <project.java.version>1.8</project.java.version>
        <java.source.version>${project.java.version}</java.source.version>
        <java.target.version>${project.java.version}</java.target.version>
        <java.compiler.version>${project.java.version}</java.compiler.version>
        <java.compiler.debuglevel>source,lines,vars</java.compiler.debuglevel>
        <java.compiler.verbose>false</java.compiler.verbose>
        <!-- ### Java 9+ OPTIONS ### -->
        <t2b.module.prop></t2b.module.prop>
        <!-- ### Config for JUnit5 launcher - default one, and it is also capable to run JUnit4 tests ### -->
        <t2b.test.runner.class>org.junit.platform.console.ConsoleLauncher</t2b.test.runner.class>
        <t2b.test.runner.class.args>
            --scan-class-path
        </t2b.test.runner.class.args>
        <!-- ### In case you dont want to run JUnit4 tests, exclude vintage engine -->
        <!--t2b.test.runner.class.args>
            &#45;&#45;scan-class-path -E=junit-vintage
        </t2b.test.runner.class.args>-->

        <jmh.version>1.35</jmh.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.google.auto.service</groupId>
            <artifactId>auto-service</artifactId>
            <version>1.0.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.github.javaparser</groupId>
            <artifactId>javaparser-symbol-solver-core</artifactId>
            <version>3.24.2</version>
        </dependency>
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
            <version>${jmh.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-annprocess</artifactId>
            <version>${jmh.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.8.2</version>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>7.7.0</version>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>java9-plus</id>
            <activation>
                <jdk>[9.0,)</jdk>
            </activation>
            <properties>
                <project.java.version>${java.specification.version}</project.java.version>
                <java.source.version>${project.java.version}</java.source.version>
                <java.target.version>${project.java.version}</java.target.version>
                <java.compiler.version>${project.java.version}</java.compiler.version>
                <!-- ### Java 9+ OPTIONS ### -->
                <t2b.module.prop>--add-exports=java.base/jdk.internal.loader=ALL-UNNAMED
                    --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED
                </t2b.module.prop>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.8.1</version>
                        <configuration>
                            <verbose>${java.compiler.verbose}</verbose>
                            <compilerVersion>${java.compiler.version}</compilerVersion>
                            <source>${java.source.version}</source>
                            <target>${java.target.version}</target>
                            <debuglevel>${java.compiler.debuglevel}</debuglevel>
                            <compilerArgs>
                                <arg>--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</arg>
                                <arg>--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</arg>
                                <arg>--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>
                                <arg>--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>
                                <arg>--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>
                                <arg>--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>
                                <arg>--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>
                                <arg>--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>
                                <arg>--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</arg>
                                <arg>--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</arg>

                                <!--                                <arg>&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.launcher=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-opens=jdk.compiler/com.sun.tools.javac.launcher=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.platform=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-opens=jdk.compiler/com.sun.tools.javac.platform=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.resources=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-opens=jdk.compiler/com.sun.tools.javac.resources=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>-->
                                <!--                                <arg>&#45;&#45;add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>-->
                            </compilerArgs>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>up-to-java9</id>
            <activation>
                <jdk>(,9.0)</jdk>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>com.sun</groupId>
                    <artifactId>tools</artifactId>
                    <version>${project.java.version}</version>
                    <scope>system</scope>
                    <systemPath>${java.home}/../lib/tools.jar</systemPath>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>run-junit4</id>
            <properties>
                <!-- ### Config for JUnit4 launcher ### -->
                <t2b.test.runner.class>org.junit.runner.JUnitCore</t2b.test.runner.class>
                <t2b.test.runner.class.args>
                    org.openjdk.jmh.generators.core.TestScopeBenchmarkGeneratorTestJU4
                </t2b.test.runner.class.args>
            </properties>
        </profile>
        <profile>
            <id>run-testng</id>
            <properties>
                <!-- ### Config for TestNG launcher ### -->
                <t2b.test.runner.class>org.testng.TestNG</t2b.test.runner.class>
                <t2b.test.runner.class.args>
                    -testclass org.openjdk.jmh.generators.core.TestScopeBenchmarkGeneratorTestNG
                </t2b.test.runner.class.args>
            </properties>
        </profile>
        <profile>
            <id>test-2-bench</id>
            <!-- @@@ Maven central snapshots repository to get dependency artifacts snapshot releases @@@ -->
            <repositories>
                <repository>
                    <id>oss.sonatype.org</id>
                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
                    <releases>
                        <enabled>false</enabled>
                    </releases>
                    <snapshots>
                        <enabled>true</enabled>
                    </snapshots>
                </repository>
            </repositories>
            <dependencies>
                <!-- @@@ T2B agent app dependency @@@ -->
                <dependency>
                    <groupId>com.gocypher.cybench</groupId>
                    <artifactId>cybench-t2b-agent</artifactId>
                    <version>1.0.8-SNAPSHOT</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.junit.platform</groupId>
                    <artifactId>junit-platform-console-standalone</artifactId>
                    <version>1.8.2</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <properties>
                <!-- ### Java executable to use ### -->
                <t2b.java.home>${java.home}</t2b.java.home>
                <t2b.java.exec>"${t2b.java.home}/bin/java"</t2b.java.exec>
                <!-- ### Java system properties used by T2B ###-->
                <t2b.sys.props>
                    -Dt2b.aop.cfg.path="${project.basedir}"/t2b/t2b.properties
                    -Dt2b.metadata.cfg.path="${project.basedir}"/t2b/metadata.properties
                    <!-- ### To use custom LOG4J configuration -->
                    <!-- -Dlog4j2.configurationFile=file:"${project.basedir}"/t2b/log4j2.xml-->
                </t2b.sys.props>
                <!--  ### Class path used to run tests: libs;classes;test-classes -->
                <t2b.run.class.path>
                    ${t2b.compile.classpath}${path.separator}${project.build.outputDirectory}${path.separator}${project.build.testOutputDirectory}
                </t2b.run.class.path>
                <!-- ### Skip running unit tests as benchmarks ### -->
                <t2b.bench.runner.skip>false</t2b.bench.runner.skip>
            </properties>
            <build>
                <plugins>
                    <!-- @@@ Make classpath entries as properties to ease access @@@ -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.1.2</version>
                        <executions>
                            <execution>
                                <id>get-classpath-filenames</id>
                                <goals>
                                    <goal>properties</goal>
                                </goals>
                            </execution>
                            <execution>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>build-classpath</goal>
                                </goals>
                                <configuration>
                                    <outputProperty>t2b.compile.classpath</outputProperty>
                                    <pathSeparator>${path.separator}</pathSeparator>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.0.0</version>
                        <executions>
                            <!-- @@@ Run unit tests as benchmarks @@@ -->
                            <execution>
                                <id>run-benchmarks</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <!-- ### Maven phase when to run unit tests as benchmarks ### -->
                                <phase>integration-test</phase>
                                <configuration>
                                    <skip>${t2b.bench.runner.skip}</skip>
                                    <executable>${t2b.java.exec}</executable>
                                    <classpathScope>test</classpathScope>
                                    <commandlineArgs>
                                        ${t2b.module.prop}
                                        -javaagent:${com.gocypher.cybench:cybench-t2b-agent:jar}
                                        ${t2b.sys.props}
                                        -cp ${t2b.run.class.path}
                                        ${t2b.test.runner.class}
                                        ${t2b.test.runner.class.args}
                                    </commandlineArgs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <defaultGoal>clean install</defaultGoal>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.1.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <verbose>${java.compiler.verbose}</verbose>
                    <compilerVersion>${java.compiler.version}</compilerVersion>
                    <source>${java.source.version}</source>
                    <target>${java.target.version}</target>
                    <debuglevel>${java.compiler.debuglevel}</debuglevel>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.8.1</version>
                <configuration>
                    <generateBackupPoms>false</generateBackupPoms>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
